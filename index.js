require('dotenv').config();
const { Client, GatewayIntentBits, Collection } = require('discord.js');
const { Player } = require('discord-player');
const { YouTubeExtractor, SpotifyExtractor } = require('@discord-player/extractor');
const fs = require('fs');
const path = require('path');
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v10');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildModeration,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.MessageContent
  ]
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞
const player = new Player(client, {
  ytdlOptions: {
    quality: 'highestaudio',
    highWaterMark: 1 << 25,
    filter: 'audioonly'
  },
  smoothVolume: true,
  useLegacyFFmpeg: false
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –ø–ª–µ–µ—Ä–∞
function setupPlayerEvents() {
  player.events.on('playerStart', (queue, track) => {
    queue.metadata.channel.send(`üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **${track.title}**`);
  });

  player.events.on('error', (queue, error) => {
    console.error('–û—à–∏–±–∫–∞ –ø–ª–µ–µ—Ä–∞:', error);
    queue.metadata.channel.send('üî¥ –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
async function initializePlayer() {
  try {
    await player.extractors.register(YouTubeExtractor, {});
    await player.extractors.register(SpotifyExtractor, {});
    console.log('‚úÖ YouTube –∏ Spotify —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤:', error);
    process.exit(1);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
client.commands = new Collection();
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
  const filePath = path.join(commandsPath, file);
  const command = require(filePath);
  if (command.data?.name) {
    client.commands.set(command.data.name, command);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
const eventsPath = path.join(__dirname, 'events');
const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));

for (const file of eventFiles) {
  const filePath = path.join(eventsPath, file);
  const event = require(filePath);
  if (event.once) {
    client.once(event.name, (...args) => event.execute(...args, client));
  } else {
    client.on(event.name, (...args) => event.execute(...args, client));
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
async function registerCommands() {
  try {
    const commands = Array.from(client.commands.values()).map(cmd => cmd.data.toJSON());
    const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);

    if (!process.env.CLIENT_ID || !process.env.GUILD_ID) {
      throw new Error("CLIENT_ID –∏ GUILD_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ");
    }

    await rest.put(
      Routes.applicationGuildCommands(
        process.env.CLIENT_ID.trim(),
        process.env.GUILD_ID.trim()
      ),
      { body: commands }
    );
    console.log('‚úÖ –°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.once('ready', async () => {
  console.log(`ü§ñ –ë–æ—Ç ${client.user.tag} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
  await initializePlayer();
  setupPlayerEvents();
  await registerCommands();
});

client.login(process.env.TOKEN).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
  process.exit(1);
});