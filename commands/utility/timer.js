const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const config = require('../../../config');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('timer')
        .setDescription('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä')
        .addIntegerOption(option =>
            option.setName('minutes')
                .setDescription('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('reason')
                .setDescription('–ü—Ä–∏—á–∏–Ω–∞ —Ç–∞–π–º–µ—Ä–∞')
                .setRequired(false)),
    async execute(interaction) {
        const minutes = interaction.options.getInteger('minutes');
        const reason = interaction.options.getString('reason') || '–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!';

        if (minutes < 1 || minutes > 1440) {
            return interaction.reply({ 
                content: '‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)', 
                ephemeral: true 
            });
        }

        const ms = minutes * 60 * 1000;
        const endTime = Date.now() + ms;

        const embed = new EmbedBuilder()
            .setColor(config.colors.primary)
            .setTitle('‚è± –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            .setDescription(`–¢–∞–π–º–µ—Ä –Ω–∞ ${minutes} –º–∏–Ω—É—Ç\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`)
            .addFields(
                { name: '–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è', value: `<t:${Math.floor(endTime / 1000)}:R>` }
            )
            .setFooter({ text: `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ${interaction.user.tag}` });

        await interaction.reply({ embeds: [embed] });

        setTimeout(async () => {
            const notifyEmbed = new EmbedBuilder()
                .setColor(config.colors.success)
                .setTitle('üîî –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!')
                .setDescription(reason)
                .setFooter({ text: `–¢–∞–π–º–µ—Ä –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${minutes} –º–∏–Ω—É—Ç` });

            await interaction.followUp({ 
                content: `${interaction.user}`, 
                embeds: [notifyEmbed] 
            });
        }, ms);
    },
};