const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const config = require('../../../config');
const User = require('../../systems/database/models/User');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('withdraw')
        .setDescription('–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–Ω–∫–∞')
        .addIntegerOption(option =>
            option.setName('amount')
                .setDescription('–°—É–º–º–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è')
                .setRequired(true)
                .setMinValue(1)),
    async execute(interaction) {
        const amount = interaction.options.getInteger('amount');

        try {
            const user = await User.findOne({ userId: interaction.user.id, guildId: interaction.guild.id });
            if (!user || user.bank < amount) {
                return interaction.reply({ 
                    content: '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ –¥–ª—è —Å–Ω—è—Ç–∏—è',
                    ephemeral: true 
                });
            }

            await User.findOneAndUpdate(
                { userId: interaction.user.id, guildId: interaction.guild.id },
                { 
                    $inc: { balance: amount, bank: -amount } 
                }
            );

            const embed = new EmbedBuilder()
                .setColor(config.colors.success)
                .setTitle('üè¶ –°–Ω—è—Ç–∏–µ —Å –±–∞–Ω–∫–∞')
                .setDescription(`–í—ã —Å–Ω—è–ª–∏ ${amount} ${config.currency} —Å –±–∞–Ω–∫–∞`)
                .setFooter({ text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${interaction.user.username}` });

            await interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error(error);
            await interaction.reply({ 
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å –±–∞–Ω–∫–∞',
                ephemeral: true 
            });
        }
    },
};