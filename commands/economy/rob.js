const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const config = require('../../../config');
const User = require('../../systems/database/models/User');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('rob')
        .setDescription('–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–≥—Ä–∞–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        .addUserOption(option =>
            option.setName('user')
                .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è')
                .setRequired(true)),
    async execute(interaction) {
        const target = interaction.options.getUser('user');

        if (target.id === interaction.user.id) {
            return interaction.reply({ 
                content: '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–≥—Ä–∞–±–∏—Ç—å —Å–µ–±—è',
                ephemeral: true 
            });
        }

        try {
            const cooldown = 10800000; // 3 —á–∞—Å–∞
            const robber = await User.findOne({ userId: interaction.user.id, guildId: interaction.guild.id });
            const victim = await User.findOne({ userId: target.id, guildId: interaction.guild.id });

            if (robber && robber.lastRob && (Date.now() - robber.lastRob) < cooldown) {
                const timeLeft = Math.ceil((cooldown - (Date.now() - robber.lastRob)) / 60000);
                return interaction.reply({ 
                    content: `‚è≥ –í—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –æ–≥—Ä–∞–±–∏—Ç—å –∫–æ–≥–æ-—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ${timeLeft} –º–∏–Ω—É—Ç.`,
                    ephemeral: true 
                });
            }

            if (!victim || victim.balance < 100) {
                return interaction.reply({ 
                    content: '‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è',
                    ephemeral: true 
                });
            }

            const success = Math.random() < 0.4; // 40% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
            const maxRob = Math.min(victim.balance, Math.floor(victim.balance * 0.3));
            const amount = Math.floor(Math.random() * maxRob) + 1;
            let result = '';

            if (success) {
                await User.findOneAndUpdate(
                    { userId: interaction.user.id, guildId: interaction.guild.id },
                    { 
                        $inc: { balance: amount },
                        $set: { lastRob: Date.now() } 
                    },
                    { upsert: true }
                );

                await User.findOneAndUpdate(
                    { userId: target.id, guildId: interaction.guild.id },
                    { $inc: { balance: -amount } }
                );

                result = `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–±–∏–ª–∏ ${target.username} –∏ —É–∫—Ä–∞–ª–∏ ${amount} ${config.currency}!`;
            } else {
                const fine = Math.floor(amount * 0.5);
                await User.findOneAndUpdate(
                    { userId: interaction.user.id, guildId: interaction.guild.id },
                    { 
                        $inc: { balance: -fine },
                        $set: { lastRob: Date.now() } 
                    },
                    { upsert: true }
                );

                result = `‚ùå –í–∞—Å –ø–æ–π–º–∞–ª–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–≥—Ä–∞–±–∏—Ç—å ${target.username}! –í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ —à—Ç—Ä–∞—Ñ ${fine} ${config.currency}.`;
            }

            const embed = new EmbedBuilder()
                .setColor(success ? config.colors.success : config.colors.error)
                .setTitle(success ? 'üí∞ –£—Å–ø–µ—à–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ' : 'üëÆ‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–∞–ª')
                .setDescription(result)
                .setFooter({ text: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞' });

            await interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error(error);
            await interaction.reply({ 
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è',
                ephemeral: true 
            });
        }
    },
};