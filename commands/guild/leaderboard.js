const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const config = require('../../../config');
const Guild = require('../../systems/database/models/Guild');
const { pagination } = require('../../utils/pagination');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('guild-leaderboard')
        .setDescription('–¢–æ–ø –≥–∏–ª—å–¥–∏–π –ø–æ —É—Ä–æ–≤–Ω—é –∏ –æ–ø—ã—Ç—É'),
    async execute(interaction) {
        try {
            const guilds = await Guild.find()
                .sort({ level: -1, experience: -1 })
                .limit(100);

            if (guilds.length === 0) {
                return interaction.reply({ 
                    content: 'üèÜ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –≥–∏–ª—å–¥–∏–π', 
                    ephemeral: true 
                });
            }

            const itemsPerPage = 10;
            const pages = [];

            for (let i = 0; i < guilds.length; i += itemsPerPage) {
                const guildsSlice = guilds.slice(i, i + itemsPerPage);
                const embed = new EmbedBuilder()
                    .setColor(config.colors.primary)
                    .setTitle(`üèÜ –¢–æ–ø –≥–∏–ª—å–¥–∏–π (${guilds.length})`)
                    .setDescription(
                        guildsSlice.map((guild, index) => 
                            `**${i + index + 1}.** ${guild.name}\n` +
                            `> –£—Ä–æ–≤–µ–Ω—å: ${guild.level} | –û–ø—ã—Ç: ${guild.experience}/${guild.level * 1000}\n` +
                            `> –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${guild.members.length} | –ö–∞–∑–Ω–∞: ${guild.treasury} –º–æ–Ω–µ—Ç\n` +
                            `> –õ–∏–¥–µ—Ä: <@${guild.leaderId}>`
                        ).join('\n\n')
                    )
                    .setFooter({ text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${Math.floor(i / itemsPerPage) + 1}/${Math.ceil(guilds.length / itemsPerPage)}` })
                    .setTimestamp();

                pages.push(embed);
            }

            await pagination(interaction, pages);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –≥–∏–ª—å–¥–∏–π:', error);
            await interaction.reply({
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –≥–∏–ª—å–¥–∏–π',
                ephemeral: true
            });
        }
    }
};