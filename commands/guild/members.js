const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const config = require('../../../config');
const Guild = require('../../systems/database/models/Guild');
const { pagination } = require('../../utils/pagination');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('guild-members')
        .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–∏–ª—å–¥–∏–∏')
        .addStringOption(option =>
            option.setName('name')
                .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏)')
                .setRequired(false)),
    async execute(interaction) {
        const name = interaction.options.getString('name');
        const userId = interaction.user.id;

        try {
            let guild;
            if (name) {
                guild = await Guild.findOne({ name });
            } else {
                guild = await Guild.findOne({ 
                    $or: [
                        { leaderId: userId },
                        { members: userId }
                    ]
                });
            }

            if (!guild) {
                return interaction.reply({ 
                    content: '‚ùå –ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', 
                    ephemeral: true 
                });
            }

            const itemsPerPage = 10;
            const pages = [];
            
            for (let i = 0; i < guild.members.length; i += itemsPerPage) {
                const membersSlice = guild.members.slice(i, i + itemsPerPage);
                const embed = new EmbedBuilder()
                    .setColor(config.colors.primary)
                    .setTitle(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–∏–ª—å–¥–∏–∏ ${guild.name}`)
                    .setDescription(
                        membersSlice.map((member, index) => 
                            `**${i + index + 1}.** <@${member}>` + 
                            (member === guild.leaderId ? ' üëë' : '')
                        ).join('\n')
                    )
                    .setFooter({ 
                        text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${Math.floor(i / itemsPerPage) + 1}/${Math.ceil(guild.members.length / itemsPerPage)} | –í—Å–µ–≥–æ: ${guild.members.length}` 
                    });

                pages.push(embed);
            }

            if (pages.length === 0) {
                pages.push(new EmbedBuilder()
                    .setColor(config.colors.primary)
                    .setTitle(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–∏–ª—å–¥–∏–∏ ${guild.name}`)
                    .setDescription('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
                );
            }

            await pagination(interaction, pages);
        } catch (error) {
            console.error(error);
            await interaction.reply({ 
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', 
                ephemeral: true 
            });
        }
    },
};