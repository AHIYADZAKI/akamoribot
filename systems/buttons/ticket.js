const { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, ChannelType } = require('discord.js');
const config = require('../../config');
const Ticket = require('../../database/models/Ticket');

module.exports = {
    customId: 'create-ticket',
    async execute(interaction) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–∫–µ—Ç—ã
            const existingTicket = await Ticket.findOne({
                userId: interaction.user.id,
                guildId: interaction.guild.id,
                status: 'open'
            });

            if (existingTicket) {
                return interaction.reply({
                    content: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç: <#${existingTicket.channelId}>`,
                    ephemeral: true
                });
            }

            // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Ç–∏–∫–µ—Ç–∞
            const channel = await interaction.guild.channels.create({
                name: `ticket-${interaction.user.username}`,
                type: ChannelType.GuildText,
                parent: config.tickets.categoryId,
                permissionOverwrites: [
                    {
                        id: interaction.guild.id,
                        deny: [ViewChannel]
                    },
                    {
                        id: interaction.user.id,
                        allow: [ViewChannel, SendMessages, ReadMessageHistory]
                    },
                    {
                        id: config.roles.staff,
                        allow: [ViewChannel, SendMessages, ReadMessageHistory]
                    }
                ]
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await Ticket.create({
                userId: interaction.user.id,
                guildId: interaction.guild.id,
                channelId: channel.id,
                status: 'open',
                createdAt: new Date()
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const embed = new EmbedBuilder()
                .setColor(config.colors.primary)
                .setTitle('üé´ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
                .setDescription(`–ü—Ä–∏–≤–µ—Ç, ${interaction.user}! –ü–µ—Ä—Å–æ–Ω–∞–ª —Å–∫–æ—Ä–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º.\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.`)
                .setFooter({ text: '–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' });

            const row = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId('close-ticket')
                    .setLabel('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
                    .setStyle(ButtonStyle.Danger)
            );

            await channel.send({ 
                content: `${interaction.user} <@&${config.roles.staff}>`,
                embeds: [embed],
                components: [row]
            });

            await interaction.reply({
                content: `–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: ${channel}`,
                ephemeral: true
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ ticket system:', error);
            await interaction.reply({
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞',
                ephemeral: true
            });
        }
    }
};